@using Syncfusion.Blazor.Navigations
@using Syncfusion.Blazor.SplitButtons
@using Syncfusion.Blazor.DropDowns
@inject ThemeService ThemeService

<div class="navbar-toolbar-container @(ThemeService.CurrentTheme == "dark" ? "navbar-dark" : "navbar-light")" style="padding: 2px 16px; display: flex; align-items: center;">
    <div class="navbar-title" style="font-size: 18px; font-weight: bold; display: flex; align-items: center; gap: 8px; margin-right: 10px;">
        <span class="sf-icon-Code"></span>
        <span style="width:260px">{ } @EditorType To Diagram</span>
        <SfToolbar>
            <ToolbarItems>
                <ToolbarItem>
                    <Template>
                        <SfDropDownButton CssClass="e-menu-btn" Content="File">
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Import" IconCss="e-icons e-import" Id="import" />
                                <DropDownMenuItem Text="Export" IconCss="e-icons e-export" Id="export" />
                            </DropDownMenuItems>
                            <DropDownButtonEvents ItemSelected="OnMenuItemClick" />
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>

                <ToolbarItem>
                    <Template>
                        <SfDropDownButton CssClass="e-menu-btn" Content="View">
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Show Grid" IconCss="@GetIconForView("toggle-grid")" Id="toggle-grid" />
                                <DropDownMenuItem Text="Item Count" IconCss="@GetIconForView("toggle-count")" Id="toggle-count" />
                                <DropDownMenuItem Text="Show Expand/Collapse Icon" IconCss="@GetIconForView("toggle-expand")" Id="toggle-expand" />
                            </DropDownMenuItems>
                            <DropDownButtonEvents ItemSelected="OnMenuItemClick" />
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>

                <ToolbarItem>
                    <Template>
                        <SfDropDownButton CssClass="e-menu-btn" Content="Theme">
                            <DropDownMenuItems>
                                <DropDownMenuItem Text="Light" IconCss="@GetIconForTheme("light")" Id="light" />
                                <DropDownMenuItem Text="Dark" IconCss="@GetIconForTheme("dark")" Id="dark" />
                            </DropDownMenuItems>
                            <DropDownButtonEvents ItemSelected="OnMenuItemClick" />
                        </SfDropDownButton>
                    </Template>
                </ToolbarItem>
            </ToolbarItems>
        </SfToolbar>
    </div>


    <SfDropDownList CssClass="select-dropdown" TValue="string" TItem="string" DataSource="@Formats" @bind-Value="@SelectedFormat" Width="70px">
        <DropDownListEvents TValue="string" TItem="string" ValueChange="OnFormatChange" />
    </SfDropDownList>
</div>

@code {
    [Parameter] public EventCallback<string> OnNavMenuAction { get; set; }
    [Parameter] public string EditorType { get; set; } = "JSON";

    private HashSet<string> ToggledViewItems = new() { "toggle-grid", "toggle-count", "toggle-expand" };
    private string SelectedTheme = "light";
    private ThemeSettings Settings;
    private string CurrentTheme = "light";
    private List<string> Formats = new List<string> { "JSON", "XML" };
    private string SelectedFormat = "JSON";

    protected override void OnInitialized()
    {
        ThemeService.OnThemeChanged += HandleThemeChanged;
        CurrentTheme = ThemeService.CurrentTheme;
        Settings = ThemeService.CurrentThemeSettings;
    }
    private void HandleThemeChanged()
    {
        CurrentTheme = ThemeService.CurrentTheme;
        Settings = ThemeService.CurrentThemeSettings;

        InvokeAsync(StateHasChanged);
    }

    private async Task OnMenuItemClick(MenuEventArgs args)
    {
        if (string.IsNullOrWhiteSpace(args.Item.Id))
            return;

        // Toggle View Items
        if (args.Item.Id.StartsWith("toggle-"))
        {
            if (ToggledViewItems.Contains(args.Item.Id))
                ToggledViewItems.Remove(args.Item.Id);
            else
                ToggledViewItems.Add(args.Item.Id);
        }

        // Switch Theme
        if (args.Item.Id.StartsWith("light") || args.Item.Id.StartsWith("dark"))
        {
            SelectedTheme = args.Item.Id;
        }

        await OnNavMenuAction.InvokeAsync(args.Item.Id);
    }

    private async Task OnFormatChange(ChangeEventArgs<string, string> args)
    {
        await OnNavMenuAction.InvokeAsync(args.Value);
    }

    private string GetIconForView(string id) => ToggledViewItems.Contains(id) ? "e-icons e-check" : "";
    private string GetIconForTheme(string id) => SelectedTheme == id ? "e-icons e-check" : "";

}

<style>
    .navbar-light {
        color: #212121;
        background-color: rgb(236, 236, 236);
        border-bottom: 1px solid rgb(77, 77, 77, 0.3);
    }

    .navbar-dark {
        background-color: #212121;
        color: rgb(236, 236, 236);
        border-bottom: 1px solid rgb(77, 77, 77);
    }

    .navbar-toolbar-container .e-toolbar, .navbar-toolbar-container .e-toolbar .e-btn {
        border: 0;
        background-color: transparent;
        box-shadow: none;
    }
    
    .navbar-toolbar-container .e-toolbar .e-btn:hover{
        background: rgba(184, 184, 184, 0.657)
    }

    .navbar-toolbar-container .e-toolbar .e-toolbar-items {
        background-color: transparent;
    }

    .select-dropdown {
        border: 0 !important;
        margin-bottom: -3px !important;
    }

/*     .e-dropdown-btn, .e-dropdown-btn.e-btn {
        background: transparent;
        color: black;
        border: 0;
    }

    .e-dropdown-btn:focus,
    .e-dropdown-btn.e-btn:focus,
    .e-dropdown-btn:active,
    .e-dropdown-btn.e-btn:active {
        outline: none;
        box-shadow: none;
    }

    .e-dropdown-btn:hover,
    .e-dropdown-btn.e-btn:hover {
        background: #f0f0f0;
    } */
</style>