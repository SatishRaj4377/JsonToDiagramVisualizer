@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Navigations


<div class="toolbar-container">
    <SfToolbar CssClass="toolbar-buttons">

        <ToolbarItems>

            <ToolbarItem PrefixIcon="e-icons e-reset" CssClass="e-flat toolbar-btn" OnClick="@(e => OnToolClick("reset"))" TooltipText="Reset"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-zoom-to-fit" CssClass="e-flat toolbar-btn" OnClick="@(e => OnToolClick("fitToPage"))" TooltipText="Fit To Page"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-zoom-in" CssClass="e-flat toolbar-btn" OnClick="@(e => OnToolClick("zoomIn"))" TooltipText="Zoom In"></ToolbarItem>
            <ToolbarItem PrefixIcon="e-icons e-zoom-out" CssClass="e-flat toolbar-btn" OnClick="@(e => OnToolClick("zoomOut"))" TooltipText="Zoom Out"></ToolbarItem>



        </ToolbarItems>
    </SfToolbar>
    <SfTextBox @ref="TextBoxDropDownObj" Placeholder="Search Node"
               CssClass="toolbar-search no-focus-outline remove-hover-effect"
               Created="@AddSearchIcon" Input="OnSearchInput"></SfTextBox>

</div>

@code{
    SfTextBox TextBoxDropDownObj { get; set; }
    [Parameter] public EventCallback<string> OnToolBarAction { get; set; }

    private void OnToolClick(string action)
    {
        OnToolBarAction.InvokeAsync(action);
    }

    private void OnSearchInput(InputEventArgs args)
    {
        var value = args?.Value?.ToString();
        OnToolBarAction.InvokeAsync($"search:{value}");
    }

    private async void AddSearchIcon()
    {
        if (TextBoxDropDownObj != null)
        {
            await TextBoxDropDownObj.AddIconAsync("prepend", "e-icons e-search search-icon");
        }
    }
}

<style>
    .toolbar-container {
        position: absolute;
        bottom: 10px;
        left: 10px;
        display: flex;
        align-items: center;
        border-radius: 3px;
    }

/*     .e-toolbar .e-toolbar-item:not(.e-separator):not(.e-spacer) {
        height: inherit;
        min-width: 28px;
        padding: 2px;
    } */

    .toolbar-search {
        flex: 1;
        margin-left: 10px;
    }

/*     .no-focus-outline.e-input-group:focus-within,
    .no-focus-outline.e-input-group.e-control-wrapper:focus-within {
        outline: none !important;
        box-shadow: none !important;
    }

    .no-focus-outline.e-input-group.e-input-focus::after,
    .no-focus-outline.e-input-group.e-control-wrapper.e-input-focus::after {
        background: none !important;
    }

    .no-focus-outline.e-input-group:target-within,
    .no-focus-outline.e-input-group.e-control-wrapper:focus-within {
        outline: none !important;
        box-shadow: none !important;
    }

    .no-focus-outline.e-input-group.e-input-focus::after,
    .no-focus-outline.e-input-group.e-control-wrapper.e-input-focus::after {
        background: none !important;
    } */

    /* Add bottom border in textbox */
/*     .e-input-group, .e-input-group.e-control-wrapper {
        background-color: transparent !important;
        border-bottom: 1px solid gray !important;
        outline: none;
        outline-width: 0px;
        box-shadow: none;
    } */

    /* Remove Outer border of textbox */
/*     .e-input-group, .e-input-group.e-success, .e-input-group.e-warning, .e-input-group.e-error, .e-input-group.e-control-wrapper, .e-input-group.e-control-wrapper.e-success, .e-input-group.e-control-wrapper.e-warning, .e-input-group.e-control-wrapper.e-error {
        border: none;
    } */

    /* Remove search icon Border in textbox */
/*     .e-input-group .e-input-group-icon,
    .e-input-group.e-control-wrapper .e-input-group-icon {
        border: none;
    } */
/* 
    .remove-hover-effect.e-input-group .e-input-group-icon.e-icons.e-search:hover,
    .remove-hover-effect.e-input-group.e-control-wrapper .e-input-group-icon.e-icons.e-search:hover {
        background-color: inherit;
        cursor: default;
    } */


</style>