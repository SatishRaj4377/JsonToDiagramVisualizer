@page "/"
@inject IJSRuntime JS
@inject HttpClient Http

<!-- Nav Bar -->
<div id="body">
    <div class="top-navbar">
        <div class="top-navbar-content">
            <div class="logo">{}JSON To Diagram Visualizer</div>
            <div class="nav-buttons">
                <button>File</button>
                <button>View</button>
                <button>Theme</button>
            </div>
        </div>
    </div>

    <!-- Main -->
    <div class="main-container">
        <!-- Editor Panel -->
        <div class="left-panel" style="width:@EditorPanelWidthPx"> 
            <StandaloneCodeEditor @ref="@monacoEditor" CssClass="json-editor"
            ConstructionOptions="EditorOptions"
            OnDidChangeModelContent="OnModelContentChange" />
        </div>

        <!-- Splitter -->
        <div class="splitter" @onmousedown="OnSplitterMouseDown"></div>

        <!-- Diagram Panel -->
        <div class="right-panel">
            <SfDiagramComponent @ref="Diagram"
            Width="100%" Height="100%"
            Nodes="@Nodes" Connectors="@Connectors"
            NodeCreating="OnNodeCreating"
            ConnectorCreating="OnConnectorCreating">
                <Layout Type="LayoutType.HierarchicalTree" Orientation="LayoutOrientation.LeftToRight"
                HorizontalSpacing="40" VerticalSpacing="40" />
            </SfDiagramComponent>
        </div>
    </div>
</div>

@code {
    #region fields

    private string EditorPanelWidthPx = "300px";
    private bool resizing = false;
    private double startX = 0;
    private double startWidth = 300;
    private double windowWidth;

    private BlazorMonaco.Editor.StandaloneCodeEditor monacoEditor;
    private string JsonValue = "";

    private SfDiagramComponent Diagram;
    private DiagramObjectCollection<Node> Nodes = new DiagramObjectCollection<Node>();
    private DiagramObjectCollection<Connector> Connectors = new DiagramObjectCollection<Connector>();

    #endregion

    #region Splitter

    private async Task OnSplitterMouseDown(MouseEventArgs e)
    {
        resizing = true;
        startX = e.ClientX;
        if (double.TryParse(EditorPanelWidthPx.Replace("px", ""), out double w))
        {
            startWidth = w;
        }
        await JS.InvokeVoidAsync("attachResizeEvents", DotNetObjectReference.Create(this));
        windowWidth = await JS.InvokeAsync<double>("getWindowWidth");
    }

    [JSInvokable]
    public void OnMouseMove(double clientX)
    {
        if (resizing)
        {
            double newWidth = startWidth + (clientX - startX);
            double maxWidth = windowWidth * 0.4; // e.g. max 40% of window
            if (newWidth > maxWidth)
            {
                newWidth = maxWidth;
            }
            EditorPanelWidthPx = newWidth + "px";
            InvokeAsync(StateHasChanged);
        }

    }

    [JSInvokable]
    public void OnMouseUp()
    {
        resizing = false;
    }

    #endregion

    #region Monaco Editor
    protected override void OnInitialized()
    {
        JsonValue = @"{
    ""TestingData"": {
        ""university"": {
            ""name"": ""Global Tech University"",
            ""location"": {
            ""city"": ""San Francisco"",
            ""state"": ""California"",
            ""country"": ""USA""
            }
        },
        ""administration"": {
            ""chancellor"": ""Dr. Marie Curie"",
            ""registrar"": ""Dr. Albert Einstein"",
            ""admissions_office"": {
            ""director"": ""Dr. Rosalind Franklin"",
            ""application_deadline"": ""2025-05-15""
            }
        },
        ""campus_facilities"": {
            ""library"": {
            ""name"": ""Tech Scholars Library"",
            ""books_available"": 50000,
            ""digital_resources"": true
            }
        }
    }
}";
        ProcessJson();
    }
    private StandaloneEditorConstructionOptions EditorOptions(StandaloneCodeEditor _)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Value = JsonValue,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            },
            Scrollbar = new EditorScrollbarOptions
            {
                VerticalScrollbarSize = 5,
                HorizontalScrollbarSize = 5,
            },
        };
    }

    private async Task OnModelContentChange(ModelContentChangedEvent e)
    {
        JsonValue = await monacoEditor.GetValue();
        ProcessJson();
        Diagram.FitToPage(new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content });
    }

    #endregion

    #region Diagram Component

    // Build the diagram from JSON
    private void ProcessJson()
    {
        try
        {
            Nodes.Clear();
            Connectors.Clear();

            if (!string.IsNullOrWhiteSpace(JsonValue))
            {
                JsonDocument doc = JsonDocument.Parse(JsonValue);
                // Create a root node for "TestingData"
                string rootId = Guid.NewGuid().ToString();
                Node rootNode = new Node
                {
                    ID = rootId,
                    Width = 150,
                    Height = 50,
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>
                    {
                        new ShapeAnnotation { Content = "TestingData" }
                    },
                };
                Nodes.Add(rootNode);

                if (doc.RootElement.TryGetProperty("TestingData", out JsonElement testingData))
                {
                    BuildNodesFromJson(testingData, rootId);
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error parsing JSON: " + ex.Message);
        }
        StateHasChanged();
    }

    private void BuildNodesFromJson(JsonElement element, string parentId)
    {
        // If it's an object => each property is a child
        if (element.ValueKind == JsonValueKind.Object)
        {
            foreach (JsonProperty prop in element.EnumerateObject())
            {
                string childId = Guid.NewGuid().ToString();
                string propName = prop.Name;
                Node childNode = new Node
                    {
                        ID = childId,
                        Width = 170,
                        Height = 50,
                        Annotations = new DiagramObjectCollection<ShapeAnnotation>
                    {
                        new ShapeAnnotation { Content = propName }
                    }
                    };
                Nodes.Add(childNode);

                Connector connector = new Connector
                    {
                        ID = Guid.NewGuid().ToString(),
                        SourceID = parentId,
                        TargetID = childId
                    };
                Connectors.Add(connector);

                BuildNodesFromJson(prop.Value, childId);
            }
        }
        // If it's an array => each item is a child node
        else if (element.ValueKind == JsonValueKind.Array)
        {
            int index = 0;
            foreach (JsonElement item in element.EnumerateArray())
            {
                string itemId = Guid.NewGuid().ToString();
                string arrayLabel = $"[{index}]";
                Node arrayNode = new Node
                {
                    ID = itemId,
                    Width = 170,
                    Height = 50,
                    Annotations = new DiagramObjectCollection<ShapeAnnotation>
                    {
                        new ShapeAnnotation { Content = arrayLabel }
                    }
                };
                Nodes.Add(arrayNode);

                Connector connector = new Connector
                {
                    ID = Guid.NewGuid().ToString(),
                    SourceID = parentId,
                    TargetID = itemId
                };
                Connectors.Add(connector);

                BuildNodesFromJson(item, itemId);
                index++;
            }
        }
        // If it’s a primitive => make a leaf node
        else
        {
            string leafId = Guid.NewGuid().ToString();
            string valueStr = element.ToString() ?? "null";
            Node leafNode = new Node
            {
                ID = leafId,
                Width = 200,
                Height = 50,
                Annotations = new DiagramObjectCollection<ShapeAnnotation>
                {
                    new ShapeAnnotation { Content = valueStr }
                }
            };
            Nodes.Add(leafNode);

            Connector leafConnector = new Connector
                {
                    ID = Guid.NewGuid().ToString(),
                    SourceID = parentId,
                    TargetID = leafId
                };
            Connectors.Add(leafConnector);
        }
    }

    private void OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node != null)
        {
            node.ExpandIcon = new DiagramExpandIcon()
            {
                Shape = DiagramExpandIcons.Minus,
                Width = 50,
                Height = 50
            };
            node.CollapseIcon = new DiagramCollapseIcon()
            {
                Shape = DiagramCollapseIcons.Plus,
                Width = 50,
                Height = 50
            };
            // Light fill, darker border
            node.Style = new ShapeStyle { Fill = "#ffffff", StrokeColor = "#bcbebf", StrokeWidth = 1 };
            if (node.Annotations != null && node.Annotations.Count > 0)
            {
                node.Annotations[0].Style = new TextStyle
                {
                    Color = "#535353",
                    Bold = false,
                    FontSize = 13
                };
            }
        }
    }

    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector connector = obj as Connector;
        if (connector != null)
        {
            connector.Type = ConnectorSegmentType.Orthogonal;
            connector.CornerRadius = 15;
            connector.Style = new ShapeStyle { StrokeColor = "#bcbebf", StrokeWidth = 1.5 };
            connector.TargetDecorator = new DecoratorSettings
            {
                Shape = DecoratorShape.None
            };
        }
    }


    #endregion
}



<style>
    .json-editor {
        height: 100%;
    }
</style>