@page "/"
@inject IJSRuntime JS
@inject HttpClient Http

<PageTitle>Diagram-JSON</PageTitle>

<!-- Nav Bar -->
<div id="body">
    <div class="top-navbar">
        <div class="top-navbar-content">
            <div class="logo">{}JSON To Diagram Visualizer</div>
            <div class="nav-buttons">
                <button>File</button>
                <button>View</button>
                <button>Theme</button>
            </div>
        </div>
    </div>

    <!-- Main -->
    <div class="main-container">
        <!-- Editor Panel -->
        <div class="left-panel" style="width:@editorPanelWidthPx"> 
            <StandaloneCodeEditor @ref="@monacoEditor" CssClass="json-editor"
            ConstructionOptions="EditorOptions"
            OnDidChangeModelContent="OnModelContentChange" />
        </div>

        <!-- Splitter -->
        <div class="splitter" @onmousedown="OnSplitterMouseDown"></div>

        <!-- Diagram Panel -->
        <div class="right-panel">
            <SfDiagramComponent @ref="diagram" Click="OnDiagramNodeClick" Width="100%" Height="100%" Created="OnCreated" NodeCreating="OnNodeCreating" ConnectorCreating="OnConnectorCreating">
                <Layout Type="LayoutType.HierarchicalTree" SamePoint="false" Orientation="LayoutOrientation.LeftToRight" HorizontalSpacing="30" VerticalSpacing="100" /> 
            </SfDiagramComponent>
        </div>
    </div>
</div>


<!-- Popup Dialog -->
<SfDialog Width="400px"
Header="Node Details"
ShowCloseIcon="true" 
IsModal="true"
@bind-Visible="isDialogVisible">
    <DialogEvents OnOverlayModalClick="@OverlayClick"></DialogEvents>
    <DialogTemplates>
        <Content>
            <div style="padding: 10px; font-family:Consolas">
                <!-- Node Content Section -->
                <div style="margin-bottom: 15px;">
                    <label style="font-weight:bold; font-size:14px; display:block; margin-bottom:5px;">Content</label>
                    <div style="
                        background-color:#f8f8f8;
                        border-radius:5px;
                        position:relative;
                        font-size:14px;">
                        <!-- Scrollable content -->
                        <div style="padding:10px; overflow-x:auto; white-space:pre;">
                            @FormatNodeDataInPopup(selectedNodeContent)
                        </div>

                        <!-- Copy button stays fixed -->
                        <button @onclick="() => CopyNodeData(selectedNodeContent)" style="
                            position:absolute;
                            top:5px;
                            right:5px;
                            background:transparent;
                            border:none;
                            cursor:pointer;">
                            <span class="e-icons @(isNodeContentCopied ? "e-check" : "e-copy")"></span>
                        </button>
                    </div>

                </div>
                <!-- JSON Path Section -->
                <div>
                    <label style="font-weight:bold; font-size:14px; display:block; margin-bottom:5px;">JSON Path</label>
                    <div style="
                        background-color:#f8f8f8;
                        border-radius:5px;
                        position:relative;
                        font-size:14px;">
                        <!-- Scrollable content -->
                        <div style="padding:10px; overflow-x:auto; white-space:pre;">
                            @FormatNodeDataInPopup(selectedNodePath, true)
                        </div>

                        <!-- Copy button stays fixed -->
                        <button @onclick="() => CopyNodeData(selectedNodePath, true)" style="
                            position:absolute;
                            top:5px;
                            right:5px;
                            background:transparent;
                            border:none;
                            cursor:pointer;">
                            <span class="e-icons @(isNodePathCopied ? "e-check" : "e-copy")"></span>
                        </button>
                    </div>

                </div>
            </div>
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    #region fields

    private string editorPanelWidthPx = "300px";
    private bool resizing = false;
    private double startX = 0;
    private double startWidth = 300;
    private double windowWidth;

    private BlazorMonaco.Editor.StandaloneCodeEditor monacoEditor;
    private string jsonValue = "";

    private SfDiagramComponent diagram;
    private DiagramObjectCollection<NodeBase> nodeBase = new DiagramObjectCollection<NodeBase>();
    private DiagramData diagramData = new DiagramData();

    private double expandCollapseIconWidth = 36;
    private int nodeCornerRadius = 3;
    private double minNodeWidth = 120;

    private bool isDialogVisible = false;
    private string selectedNodePath = "";
    private string selectedNodeContent = "";
    private bool isNodeContentCopied = false;
    private bool isNodePathCopied = false;

    #endregion

    #region Splitter

    private async Task OnSplitterMouseDown(MouseEventArgs e)
    {
        resizing = true;
        startX = e.ClientX;
        if (double.TryParse(editorPanelWidthPx.Replace("px", ""), out double w))
        {
            startWidth = w;
        }
        await JS.InvokeVoidAsync("attachResizeEvents", DotNetObjectReference.Create(this));
        windowWidth = await JS.InvokeAsync<double>("getWindowWidth");
    }

    [JSInvokable]
    public void OnMouseMove(double clientX)
    {
        if (resizing)
        {
            double newWidth = startWidth + (clientX - startX);
            double maxWidth = windowWidth * 0.4; // e.g. max 40% of window
            if (newWidth > maxWidth)
            {
                newWidth = maxWidth;
            }
            editorPanelWidthPx = newWidth + "px";
            InvokeAsync(StateHasChanged);
        }

    }

    [JSInvokable]
    public void OnMouseUp()
    {
        resizing = false;
    }

    #endregion

    #region Monaco Editor
    protected override void OnInitialized()
    {
        // Initialize the Monaco editor with a default JSON value.
        jsonValue = @"{
    ""TestingData"": {
        ""university"": {
            ""name"": ""Global Tech University"",
            ""location"": {
            ""city"": ""San Francisco"",
            ""state"": ""California"",
            ""country"": ""USA""
            }
        },
        ""administration"": {
            ""chancellor"": ""Dr. Marie Curie"",
            ""registrar"": ""Dr. Albert Einstein"",
            ""admissions_office"": {
            ""director"": ""Dr. Rosalind Franklin"",
            ""application_deadline"": ""2025-05-15""
            }
        },
        ""campus_facilities"": {
            ""library"": {
            ""name"": ""Tech Scholars Library"",
            ""books_available"": 50000,
            ""digital_resources"": true
            }
        }
    }
}";
    }

    private StandaloneEditorConstructionOptions EditorOptions(StandaloneCodeEditor _)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "json",
            Value = jsonValue,
            Minimap = new EditorMinimapOptions
            {
                Enabled = false
            },
            ScrollBeyondLastLine = false,
            Scrollbar = new EditorScrollbarOptions
            {
                VerticalScrollbarSize = 5,
                HorizontalScrollbarSize = 5,
            },
        };
    }

    private async Task OnModelContentChange(ModelContentChangedEvent e)
    {
        jsonValue = await monacoEditor.GetValue();
        await ParseAndUpdateDiagram();
    }

    #endregion

    #region Diagram Component

    private async Task OnCreated()
    {
        await ParseAndUpdateDiagram();
    }

    private async Task OnNodeCreating(IDiagramObject obj)
    {
        Node node = obj as Node;
        if (node != null)
        {
            node.Style = new ShapeStyle { Fill = "#ffffff", StrokeColor = "#bcbebf", StrokeWidth = 1 };
            var (width, height) = await GetNodeSizeAsync((string)node.AdditionalInfo["mergedContent"], (bool)node.AdditionalInfo["isLeaf"], minNodeWidth);
            node.Width = width;
            node.Height = height;
            AdjustNodeAnnotationPosition(node);
            if (node.ID != "main-root")
            {
                node.ExpandIcon = new DiagramExpandIcon()
                {
                    Shape = DiagramExpandIcons.Minus,
                    Width = expandCollapseIconWidth,
                    Height = node.Height ?? 50,
                    HorizontalAlignment = HorizontalAlignment.Right,
                    CornerRadius = nodeCornerRadius,
                    BorderColor = "#bcbebf",
                };
                node.CollapseIcon = new DiagramCollapseIcon()
                {
                    Shape = DiagramCollapseIcons.Plus,
                    Width = expandCollapseIconWidth,
                    Height = node.Height ?? 50,
                    HorizontalAlignment = HorizontalAlignment.Right,
                    CornerRadius = nodeCornerRadius,
                    BorderColor = "#bcbebf",
                };                
                if (node.Annotations != null && node.Annotations.Count > 0)
                {
                    node.Annotations[0].Style = new TextStyle
                    {
                        Color = "#535353",
                        Bold = false,
                        FontSize = 13,
                        TextAlign = TextAlign.Left ,
                    };
                }
                node.Shape = new BasicShape { Shape = NodeBasicShapes.Rectangle, Type = NodeShapes.Basic , CornerRadius = nodeCornerRadius};
            }
            else
            {
                node.Shape = new BasicShape { Shape = NodeBasicShapes.Ellipse, Type = NodeShapes.Basic };
            }
        }
    }

    private void OnConnectorCreating(IDiagramObject obj)
    {
        Connector connector = obj as Connector;
        if (connector != null)
        {
            connector.Type = ConnectorSegmentType.Orthogonal;
            connector.CornerRadius = 15;
            connector.Style = new ShapeStyle { StrokeColor = "#bcbebf", StrokeWidth = 1.5 };
            connector.TargetDecorator = new DecoratorSettings
            {
                Shape = DecoratorShape.None
            };
        }
    }

    private async Task ParseAndUpdateDiagram()
    {
        try
        {
            using (JsonDocument doc = JsonDocument.Parse(jsonValue))
            {
                diagramData = JsonDiagramParser.ProcessData(doc.RootElement);
            }

            // Clear existing nodes and connectors
            diagram.Clear();
            nodeBase.Clear();

            foreach (var node in diagramData.Nodes)
            {
                nodeBase.Add(node);
            }
            foreach (var conn in diagramData.Connectors)
            {
                nodeBase.Add(conn);
            }

            // Add nodes and connectors to the diagram
            await diagram.AddDiagramElementsAsync(nodeBase);

            // Update the diagram layout
            await diagram.DoLayoutAsync();

            // Fit the diagram to the page
            diagram.FitToPage(new FitOptions() { Mode = FitMode.Both, Region = DiagramRegion.Content });
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("showError", "Error parsing JSON: " + ex.Message);
            Console.WriteLine($"Error parsing JSON: {ex.Message}");
        }
    }

    private async Task<(double width, double height)> GetNodeSizeAsync(string content, bool isLeaf, double minWidth)
    {
        var result = await JS.InvokeAsync<Dictionary<string, double>>("getTextSize", content);

        double iconExtra = isLeaf ? 0 : expandCollapseIconWidth;
        double width = result["width"] + iconExtra;

        width = Math.Max(minWidth, width);

        return (width, result["height"]);
    }


    private void AdjustNodeAnnotationPosition(Node node)
    {
        int padding = 10;

        if (node.Annotations == null || node.Annotations.Count == 0)
            return;

        if (node.Annotations.Count >= 2)
        {
            // Left-align the first annotation
            var annotation1 = node.Annotations[0];
            annotation1.Offset = new DiagramPoint { X = 0, Y = 0.5 };
            annotation1.HorizontalAlignment = HorizontalAlignment.Left;
            annotation1.Style = new TextStyle
            {
                TextAlign = TextAlign.Left,
            };
            annotation1.Margin = new DiagramThickness { Left = padding };

            // Right-align the second annotation
            var annotation2 = node.Annotations[1];
            annotation2.Offset = new DiagramPoint { X = 1, Y = 0.5 };
            annotation2.HorizontalAlignment = HorizontalAlignment.Right;
            annotation2.Style = new TextStyle
            {
                TextAlign = TextAlign.Right,
            };
            annotation2.Margin = new DiagramThickness { Right = expandCollapseIconWidth + padding };
        }
    }
    #endregion

    #region Popup Dialog

    private void OnDiagramNodeClick(ClickEventArgs args)
    {
        if (args.Element is Node node && node.Data != null && args.ActualObject != null)
        {
            var nodeData = node.Data.GetType().GetProperty("actualdata")?.GetValue(node.Data, null)?.ToString();
            var path = node.Data.GetType().GetProperty("path")?.GetValue(node.Data, null)?.ToString();

            if (!string.IsNullOrEmpty(nodeData) && !string.IsNullOrEmpty(path))
            {
                ShowNodePopup(nodeData, path);
            }
        }
    }

    private void ShowNodePopup(string nodeContent, string nodePath)
    {
        selectedNodeContent = nodeContent;
        selectedNodePath = nodePath;
        isDialogVisible = true;
    }

    private RenderFragment FormatNodeDataInPopup(string content, bool isPath = false) => __builder =>
    {
        if (string.IsNullOrWhiteSpace(content))
            return;

        var lines = content.Split('\n');
        int seq = 0;
        foreach (var line in lines)
        {
            __builder.OpenElement(seq++, "div");
            // Split the line at first colon, if possible.
            var parts = line.Split(new char[] { ':' }, 2, StringSplitOptions.RemoveEmptyEntries);
            if (parts.Length == 2)
            {
                var key = parts[0].Trim();
                var value = parts[1].Trim();

                // Render key (purple, bold)
                __builder.OpenElement(seq++, "span");
                __builder.AddAttribute(seq++, "style", "color:#9C27B0; font-weight:bold; margin-right:5px;");
                __builder.AddContent(seq++, key);
                __builder.CloseElement();

                // Render colon separator
                __builder.OpenElement(seq++, "span");
                __builder.AddAttribute(seq++, "style", "margin-right:5px;");
                __builder.AddContent(seq++, ":");
                __builder.CloseElement();

                // Render value (green)
                __builder.OpenElement(seq++, "span");
                __builder.AddAttribute(seq++, "style", "color:#4CAF50;");
                __builder.AddContent(seq++, value);
                __builder.CloseElement();
            }
            else
            {
                // If no colon, render the line in default styling
                if (isPath)
                {
                    __builder.AddContent(seq++, AddCurlyBracesAroundRoot(line));
                }
                else
                {
                    __builder.AddAttribute(seq++, "style", "color:#4CAF50;");
                    __builder.AddContent(seq++, line);
                }
            }
            __builder.CloseElement();
        }
    };

    private string AddCurlyBracesAroundRoot(string input)
    {
        int firstDotIndex = input.IndexOf('.');
        if (firstDotIndex == -1)
        {
            return input;
        }
        string root = input.Substring(0, firstDotIndex);
        string restOfString = input.Substring(firstDotIndex);

        return $"{{{root}}}{restOfString}";
    }

    private async Task CopyNodeData(string data, bool isPath = false)
    {
        await JS.InvokeVoidAsync("navigator.clipboard.writeText", data);

        if (isPath)
            isNodePathCopied = true;
        else
            isNodeContentCopied = true;

        StateHasChanged();

        await Task.Delay(1500);

        StateHasChanged();

        if (isPath)
            isNodePathCopied = false;
        else
            isNodeContentCopied = false;
    }

    private void OverlayClick(OverlayModalClickEventArgs args)
    {
        isDialogVisible = false;
    }
    #endregion
}

<style>
    .json-editor {
        height: 100%;
    }
</style>